/*
ES6 =========================================================================

    1. let 和 const：

        ① let：

            a. 变量不能重复声明
            b. 块级作用域
            c. 不存在变量提升
            d. 不影响作用域链

        ② const:

            a. 一定要赋初始值
            b. 一般常量使用大写(非必要)
            c. 常量的值不能修改
            d. 块级作用域
            e. 对于数组和对象的元素修改，不算对常量的修改，不会报错

    2. 解构赋值：

    3. 模板字符串(反引号)：

        ① 内容中可以直接出现换行符
        ② 变量拼接

        let num = 1
        let test = `${num}是数字`

    4. 对象的简化写法：
        允许在大括号里边 直接写入变量和函数 作为对象的属性和方法
        
        let change = function(){}
        const test = {                    简化后===>            const test = {
            name: name,                                             name,
            change: change,                                         change,
            func: function(){  }                                    func(){  }
        }                                                       }

    5. 箭头函数()=>：

        ① this 是静态的，this 始终指向函数声明时所在作用域下的 this 的值
        ② 不能作为构造实例化对象
        ③ 不能使用 anguments 变量
        ④ 简写：
            a. 省略小括号，当形参有且只有一个的时候
            b. 省略花括号，当代码体只有一条语句的时候，此时return必须省略，语句的执行结果就是返回值

    6. 允许给函数参数赋值初始值

    7. 引入了 rest 参数，用于获取函数的实参，代替 anguments
       rest 参数必须放到参数最后

        function test(...args){  }

    8. 扩展运算符【...】：
        
        能将 数组 转换为逗号分隔的 参数序列

    9. 数据类型 Symbol：

        表示独一无二的值
        给对象添加属性和方法

        不能与其他数据进行运算、对比
        
        let test = Symbol('可传参数，参数仅仅是一个标识');
        let test = Symbol.for('可传参数，若参数一样，值一样');





*/